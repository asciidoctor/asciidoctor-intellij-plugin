buildscript {
  repositories {
    jcenter()
    maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    maven { url 'https://www.jetbrains.com/intellij-repository/snapshots' }
  }
  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.21.0'
  }
}

plugins {
  id "org.jetbrains.intellij" version "0.4.17"
  id "org.jetbrains.grammarkit" version "2018.3.1"
  id "checkstyle"
  id 'org.asciidoctor.jvm.convert' version '2.2.0'
  // once windows classpaths get too long, use this dependency to make them shorter again
  id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
  id 'net.ltgt.errorprone' version '0.8.1' apply false
}

checkstyle {
  toolVersion '8.30'
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'java'
apply plugin: 'net.ltgt.errorprone'

import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jsoup.Jsoup

allprojects {
  repositories {
    jcenter()
  }
}

intellij {
  // we support IC-2017.2, but PsiViewer is not available for the older version, therefore use IC-2018.1 to run it
  // Grazie is only available from 2019.2, therefore use IC-2019.2 to run it
  version 'IC-2020.1'
  pluginName 'asciidoctor-intellij-plugin'
  updateSinceUntilBuild false
  plugins = [
    'PsiViewer:201-SNAPSHOT', // used for debugging
    'PlantUML integration:2.23.0', // used to test highlighting of PlantUML diagrams
    'tanvd.grazi:2020.1', // :2019.3-6.2.stable', // used for spelling and grammar checking
    'java' // used to integrate into the build via AsciiDocTargetScopeProvider
  ]
}

asciidoctor {
  sourceDir file('.')
  sources {
    include 'CHANGELOG.adoc'
  }
  outputDir file('build/docs')
}

patchPluginXml {
  dependsOn asciidoctor
  version System.getenv('TRAVIS_TAG')
  changeNotes = {
    Jsoup.parse(file('build/docs/CHANGELOG.html').getText('UTF-8'))
      .select("#releasenotes").get(0).nextElementSibling().children()
      .subList(0, 20)
      .stream().map { e ->
      e.html()
        .replaceAll('\\(preview, available from GitHub releases\\)', '')
        .replaceAll('#([0-9]+)', '<a href="https://github.com/asciidoctor/asciidoctor-intellij-plugin/issues/$1">#$1</a>')
        // regex for GitHub user names from https://github.com/shinnn/github-username-regex
        .replaceAll('(?i)@([a-z\\d](?:[a-z\\d]|-(?=[a-z\\d])){0,38})', '<a href="https://github.com/$1">@$1</a>')
    }
      .collect().join("\n")
  }
  pluginDescription "${file('src/main/resources/META-INF/description.html').getText('UTF-8')}"
}

runIde {
  jvmArgs = ['-Xmx1024m']
}

publishPlugin {
  username 'ahus1'
  token System.getenv('PLUGIN_REPO_TOKEN')
  channels 'eap'
}

test {
  testLogging {
    // this show the full exception on failed tests on travis
    exceptionFormat = 'full'
  }
}

dependencies {
  errorprone 'com.google.errorprone:error_prone_core:2.3.2'
  errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
  compile 'org.asciidoctor:asciidoctorj-diagram:1.5.18'
  compile 'org.asciidoctor:asciidoctorj-pdf:1.5.3'
  /* snakeyaml is s used by asciidoctorj-pdf, but is actually provided within jruby-stdlib
   * a snakeyaml version in the classpath takes precedence, but IntelliJ includes a version that is too old
   * therefore this plugin includes the same version of snakeyaml that is already included in jruby-stdlib
   * to prevent loading the older version from IntelliJ.
   * When a different version than jruby-stdlib 9.2.9.0 is used after upgrading asciidoctorj,
   * double check the snakeyaml version.
   * https://github.com/asciidoctor/asciidoctorj-pdf/issues/25
   */
  compile 'org.yaml:snakeyaml:1.23'
  compile 'org.asciidoctor:asciidoctorj:2.2.0'
  compile 'commons-io:commons-io:2.4'
  compile 'nl.jworks.markdown_to_asciidoc:markdown_to_asciidoc:1.1'
  compile 'org.apache.commons:commons-text:1.8'
  testCompile 'junit:junit:4.12'
  testCompile 'com.tngtech.archunit:archunit-junit4:0.10.2'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.1'
}

def genRoot = file('gen')

sourceSets {
  main {
    java.srcDirs project.files(genRoot)
    resources {
      exclude('META-INF/description.html')
    }
  }
}

grammarKit {
}

task generateAsciidocLexer(type: GenerateLexer) {
  source = "src/main/java/org/asciidoc/intellij/lexer/asciidoc.flex"
  targetDir = "gen/org/asciidoc/intellij/lexer"
  targetClass = "_AsciiDocLexer"
  purgeOldFiles = true
}

compileJava {
  options.errorprone.excludedPaths = '.*_AsciiDocLexer.*'
  options.errorprone.error('StreamResourceLeak') // enforce errors where there would be warning in the standard only
  dependsOn generateAsciidocLexer
}
