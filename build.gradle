buildscript {
  repositories {
    jcenter()
    maven { url 'https://dl.bintray.com/jetbrains/intellij-plugin-service' }
    maven { url 'https://www.jetbrains.com/intellij-repository/snapshots' }
  }
  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.21.0'
  }
}
plugins {
  id "org.jetbrains.intellij" version "0.6.5"
  id "org.jetbrains.grammarkit" version "2020.2.1"
  id "checkstyle"
  id 'org.asciidoctor.jvm.convert' version '3.3.0'
  // once windows classpaths get too long, use this dependency to make them shorter again
  id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
  // https://github.com/tbroyer/gradle-errorprone-plugin
  id 'net.ltgt.errorprone' version '1.3.0' apply false
}

version = System.getenv('VERSION')

checkstyle {
  toolVersion '8.30'
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'java'
apply plugin: 'net.ltgt.errorprone'

import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jsoup.Jsoup

allprojects {
  repositories {
    mavenLocal()
    jcenter()
  }
}

// enforce target classfile version of 8

intellij {
  version 'IC-2020.3.2' // 'IC-203.5981.41-EAP-SNAPSHOT'
  pluginName 'asciidoctor-intellij-plugin'
  updateSinceUntilBuild false
  plugins = [
    'PsiViewer:203-SNAPSHOT', // used for debugging
    'PlantUML integration:3.4.0', // used to test highlighting of plantuml diagrams
    'tanvd.grazi', // used for spell and grammar checking checking
    'com.intellij.javafx:1.0.3',
    'org.intellij.intelliLang', //
    'java' // used to integrate into the build via AsciiDocTargetScopeProvider
  ]
}

asciidoctor {
  sourceDir file('.')
  sources {
    include 'CHANGELOG.adoc'
  }
  outputDir file('build/docs')
}

patchPluginXml {
  dependsOn asciidoctor
  version version
  changeNotes = {
    Jsoup.parse(file('build/docs/CHANGELOG.html').getText('UTF-8'))
      .select("#releasenotes").get(0).nextElementSibling().children()
      .subList(0, 20)
      .stream().map { e ->
      e.html()
        .replaceAll('\\(work in progress\\)', '')
        .replaceAll('\\(preview, available from GitHub releases\\)', '')
        .replaceAll('#([0-9]+)', '<a href="https://github.com/asciidoctor/asciidoctor-intellij-plugin/issues/$1">#$1</a>')
        // regex for GitHub user names from https://github.com/shinnn/github-username-regex
        .replaceAll('(?i)@([a-z\\d](?:[a-z\\d]|-(?=[a-z\\d])){0,38})', '<a href="https://github.com/$1">@$1</a>')
    }
      .collect().join("\n")
  }
  pluginDescription "${file('src/main/resources/META-INF/description.html').getText('UTF-8')}"
}

intellij {
  // use the alternativeIdePath to specifiy for example a path to MPS
  // at least on Windows it doesn't recognize the IDE's JBR, therefore run Gradle with the JBR runtime directly
  // alternativeIdePath "..."
}

runIde {
  jvmArgs = ['-Xmx1024m','-XX:+UnlockDiagnosticVMOptions']
  // should not automatically reload plugin on change in IDE, as JRuby is not very good at this
  systemProperty('idea.auto.reload.plugins', 'false')

  systemProperty('ide.plugins.snapshot.on.unload.fail', 'true')
}

runPluginVerifier {
  ideVersions(project.pluginVerifierIdeVersions)
}

publishPlugin {
  username 'ahus1'
  token System.getenv('PUBLISH_TOKEN')
  channels 'eap'
}

test {
  testLogging {
    // this show the full exception on failed tests on the build server
    exceptionFormat = 'full'
  }
}

dependencies {
  errorprone 'com.google.errorprone:error_prone_core:2.5.1'
  /* snakeyaml is s used by asciidoctorj-pdf, but is actually provided within jruby-stdlib
   * a snakeyaml version in the classpath takes precedence, but IntelliJ includes a version that is too old
   * therefore this plugin includes the same version of snakeyaml that is already included in jruby-stdlib
   * to prevent loading the older version from IntelliJ.
   * When a different version than jruby-stdlib 9.2.13.0 is used after upgrading asciidoctorj,
   * double check the snakeyaml version.
   * https://github.com/asciidoctor/asciidoctorj-pdf/issues/25
   */
  implementation 'org.yaml:snakeyaml:1.26'
  implementation 'org.asciidoctor:asciidoctorj:2.4.2' // WARNING: when upgrading asciidoctorj, see comment above about snakeyaml!
  implementation 'commons-io:commons-io:2.8.0'
  implementation 'nl.jworks.markdown_to_asciidoc:markdown_to_asciidoc:1.1'
  implementation 'org.apache.commons:commons-text:1.9'
  implementation 'io.sentry:sentry:4.0.0'

  // when updating the versions here, also update them in AsciiDocDownloaderUtil for dynamic download
  testImplementation 'org.asciidoctor:asciidoctorj-diagram:2.1.0'
  testImplementation 'org.asciidoctor:asciidoctorj-pdf:1.5.4'

  testImplementation 'junit:junit:4.13.1'
  testImplementation 'com.tngtech.archunit:archunit-junit4:0.16.0'
  testImplementation 'org.assertj:assertj-core:3.19.0'
  testCompile 'org.mockito:mockito-core:3.7.7'
}

def genRoot = file('gen')

sourceSets {
  main {
    java.srcDirs project.files(genRoot)
    resources {
      exclude('META-INF/description.html')
    }
  }
}

grammarKit {
}

task showLinkToContributorGuide {
  println("\nFirst time contributing to this plugin? Have a look at the IntelliJ AsciiDoc Plugin contributor's guide for coders:\n" +
    "https://intellij-asciidoc-plugin.ahus1.de/docs/contributors-guide/contribute-as-a-coder.html\n")
}

task checkJavaVersion {
  if (JavaVersion.current() != JavaVersion.VERSION_11) {
    throw new GradleException("As of plugin version 0.34.x, this build must be run with Java 11, see:\n" +
      "https://intellij-asciidoc-plugin.ahus1.de/docs/contributors-guide/coder/setup-environment.html")
  }
}

task generateAsciidocLexer(type: GenerateLexer) {
  source = "src/main/java/org/asciidoc/intellij/lexer/asciidoc.flex"
  targetDir = "gen/org/asciidoc/intellij/lexer"
  targetClass = "_AsciiDocLexer"
}

compileJava {
  options.errorprone.excludedPaths = '.*_AsciiDocLexer.*'
  options.errorprone.error('StreamResourceLeak') // enforce errors where there would be warning in the standard only
  options.errorprone.disable('MissingSummary')
  // as long as the plugin supports 2020.2 as well, keep source and target compatibility for JDK 8
  options.compilerArgs.addAll(['--release', '8'])
  // will print link to contributor guide at the start of each build
  dependsOn showLinkToContributorGuide
  // checking that we run on JDK 11, as this is required to compile against IC 2020.3
  dependsOn checkJavaVersion
  dependsOn generateAsciidocLexer
}

// ensure to print hint to contributor's guide on build failures again
gradle.taskGraph.afterTask { Task task, TaskState state ->
  if (state.failure) {
    println("\nA build step failed. Maybe the IntelliJ AsciiDoc Plugin contributor's guide can give a hint?\n" +
      "https://intellij-asciidoc-plugin.ahus1.de/docs/contributors-guide/contribute-as-a-coder.html\n")
  }
}
