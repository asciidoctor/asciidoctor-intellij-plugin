name: Qodana Documentation validation
on:
  push:
    branches-ignore:
      - 'dependabot/**'
    paths:
      - 'doc/**'
      - '.github/workflows/docs.yml'
      - 'qodana.yaml'
  pull_request:
    paths:
      - 'doc/**'
      - '.github/workflows/docs.yml'
      - 'qodana.yaml'
jobs:
  qodana-docs:
    name: Qodana Docs
    runs-on: ubuntu-latest
    permissions:
      # necessary for the runs of push to store security events in the repo
      # GitHub code scanning will treat any grammar error like any security event.
      security-events: write
    steps:

      - name: Fetch Sources
        # Check out current repository
        uses: actions/checkout@v3

      - name: Download AsciiDoc plugin for AsciiDoc checks
        run: |
          curl -L -o asciidoctor-intellij-plugin.zip https://github.com/asciidoctor/asciidoctor-intellij-plugin/releases/download/0.37.13/asciidoctor-intellij-plugin-0.37.13.zip
          unzip asciidoctor-intellij-plugin.zip

      - name: Download Grazie plugin for grammar checks
        # https://plugins.jetbrains.com/plugin/12175-grazie/versions
        run: |
          curl -L -o grazie.zip 'https://plugins.jetbrains.com/plugin/download?rel=true&updateId=160382'
          unzip grazie.zip

      - name: Download Grazie Professional plugin for grammar checks
        # https://plugins.jetbrains.com/plugin/16136-grazie-professional/versions
        run: |
          curl -L -o grazie-pro.zip 'https://plugins.jetbrains.com/plugin/download?rel=true&updateId=168105'
          unzip grazie-pro.zip

      - name: 'Qodana for Docs'
        uses: JetBrains/qodana-action@v5.0.4
        with:
          # https://hub.docker.com/r/jetbrains/qodana-jvm-community/tags
          args: >
            --linter,jetbrains/qodana-jvm-community:2021.3,
            --project-dir,${{ github.workspace }}/doc,
            -v,${{ github.workspace }}/grazie:/opt/idea/plugins/grazie,
            -v,${{ github.workspace }}/grazie-pro:/opt/idea/plugins/grazie-pro,
            -v,${{ github.workspace }}/asciidoctor-intellij-plugin:/opt/idea/plugins/asciidoctor-intellij-plugin,
            --baseline,qodana-baseline.sarif.json
          use-annotations: false
      - name: Add "doc" to paths as qodana ran from "doc" folder
        # Otherwise, GitHub won't be able to match the reported problems to file in the repository
        run: |
          sed -i 's|"uri": "|"uri": "doc/|g' ${{ runner.temp }}/qodana/results/qodana.sarif.json

      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github#example-workflow-that-runs-the-eslint-analysis-tool
      - name: Upload SARIF report to GitHub
        # so that it is present on all pull requests and GitHub shows the comparison results
        uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: ${{ runner.temp }}/qodana/results/qodana.sarif.json

  github-pages:
    name: GitHub Pages
    runs-on: ubuntu-latest
    needs:
      - qodana-docs
    if: github.ref_name == 'main'
    permissions:
      # allow to publish github pages
      contents: write
    steps:

      # Download plugin artifact provided by the previous job
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: qodana-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./results/report
          destination_dir: ./

  # tag::cleanup[]
  cleanup:
    name: Cleanup old builds
    # avoid 403 error with message "Resource not accessible by integration" (seen with dependabot)
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old runs
        uses: actions/github-script@v6
        # language=js
        with:
          script: |
            const days_to_expiration = 30;
            const ms_in_day = 86400000;
            const now = Date.now();
            let response = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 30,
                workflow_id: 'docs.yml'
            });

            // traverse from the end to delete from the end to not get confused when deleting items
            let page = Math.ceil(response.data.total_count / 30)

            while (page > 1) {
                response = await github.rest.actions.listWorkflowRuns({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    page: page,
                    workflow_id: 'docs.yml'
                });

                for (const run of response.data.workflow_runs) {
                    const days_old = Math.ceil((now - Date.parse(run.created_at)) / ms_in_day)
                    if (days_old > days_to_expiration) {
                        console.log(`Run id ${run.id} is ${days_old} day old. Deleting...`);
                        await github.rest.actions.deleteWorkflowRun({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            run_id: run.id
                        });
                    } else {
                        console.log(`Run id ${run.id} is ${days_old} day old. Keeping...`);
                    }
                }
                -- page
            }
# end::cleanup[]
